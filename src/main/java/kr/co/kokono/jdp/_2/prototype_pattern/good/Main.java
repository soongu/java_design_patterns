package kr.co.kokono.jdp._2.prototype_pattern.good;

/**
 * @benefit
 *
 * 이번 good1패키지 예제에서는 클릭 이벤트에 따라
 * 정렬을 수행할 때 데이터베이스를 통해서 직접 참조하는 것이 아닌
 * 이미 만들어져 있는 원형 객체를 복사하고 있습니다.
 * 호출되는 생성자 내부에서 원형 객체가 복사됨을 확인하세요.
 *
 * 이렇게 하면 같은 정보를 정렬 방식에 따라 정렬하여 사용할 수 있어
 * 매번 데이터 베이스에 접속하는 시간과 그에 따른 자원의 낭비를
 * 줄일 수 있습니다.
 *
 * @conclusion
 * # 프로토타입 패턴이란??
 *
 * 동작에 필요한 객체들을 서버에서 생성하고 클라이언트에 제공함으로써
 * 각각의 클라이언트에서 개별적으로 객체를 생성해야 하는 문제점을 해결합니다.
 * 또 미들웨어 서버에서도 객체를 복사함으로써 불필요한 데이터베이스 서버작업을
 * 줄일 수 있습니다.
 *
 * 이 패턴에서는 원형 객체의 생성이 필요합니다. 그리고 이 객체를 복사해서
 * 사용하는데 이렇게 함으로써 클래스를 통해 직접 객체를 생성하는 데 필요한
 * 자원의 낭비를 피하는 것입니다.
 *
 * @postscript
 *
 * 자바에서는 언어차원으로 Object클래스를 통해 clone()메서드를 제공하고 있습니다.
 * 이걸 사용하기 위해 Cloneable이라는 인터페이스를 구현하면 됩니다.
 */
public class Main {

    public static void main(String[] args) {
        new AddressBook("Address Book By good1");
    }
}
